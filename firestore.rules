rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate preset data
    function isValidPreset() {
      return request.resource.data.keys().hasAll(['name', 'speciesCount', 'parameters']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() < 100 &&
             request.resource.data.speciesCount is number &&
             request.resource.data.speciesCount >= 1 &&
             request.resource.data.speciesCount <= 12;
    }
    
    // Helper function to check for test/invalid preset names
    function isNotTestPreset() {
      let name = request.resource.data.name.lower();
      return !name.matches('.*test.*') &&
             !name.matches('.*temp.*') &&
             !name.matches('.*debug.*') &&
             !name.matches('.*workflow.*') &&
             name != 'custom' &&
             name != 'untitled' &&
             name != 'new preset';
    }
    
    // Presets collection rules
    match /presets/{presetId} {
      // Allow read access to all public and shared presets
      allow read: if resource.data.status == 'public' || 
                     resource.data.status == 'shared' ||
                     (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Allow create if authenticated, data is valid, and not a test preset
      allow create: if isAuthenticated() && 
                      isValidPreset() &&
                      isNotTestPreset() &&
                      request.resource.data.userId == request.auth.uid;
      
      // Allow update only by owner and if data remains valid
      allow update: if isOwner(resource.data.userId) && 
                      isValidPreset() &&
                      isNotTestPreset() &&
                      request.resource.data.userId == resource.data.userId;
      
      // Allow delete only by owner
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Shared links collection rules
    match /shared_links/{linkId} {
      // Allow read access to all (needed to access shared presets)
      allow read: if true;
      
      // Allow create if authenticated
      allow create: if isAuthenticated() &&
                      request.resource.data.keys().hasAll(['presetId', 'createdBy', 'createdAt', 'expiresAt']) &&
                      request.resource.data.createdBy == request.auth.uid;
      
      // Allow update only by creator (for access count)
      allow update: if isOwner(resource.data.createdBy) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['accessCount']));
      
      // Allow delete only by creator
      allow delete: if isOwner(resource.data.createdBy);
    }
    
    // User profiles collection (for future use)
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}